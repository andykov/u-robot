$button-color: $grey-darker !default;
$button-background-color: $white !default;

$button-border-color: $grey-lighter !default;
$button-border-width: $control-border-width !default;

$button-padding-vertical: calc(0.375em - #{$button-border-width}) !default;
//$button-padding-horizontal: 0.75em !default;
//$button-padding-horizontal: 2.143em !default; // 30px
$button-padding-horizontal: 1.5714285714285714em !default; // 22px

$button-hover-color: $link-hover !default;
$button-hover-border-color: $link-hover-border !default;

$button-focus-color: $link-focus !default;
$button-focus-border-color: $link-focus-border !default;
$button-focus-box-shadow-size: 0 0 0 0.125em !default;
$button-focus-box-shadow-color: rgba($link, 0.25) !default;

$button-active-color: $link-active !default;
$button-active-border-color: $link-active-border !default;

$button-text-color: $text !default;
$button-text-hover-background-color: $background !default;
$button-text-hover-color: $text-strong !default;

$button-disabled-background-color: $white !default;
$button-disabled-border-color: $grey-lighter !default;
$button-disabled-shadow: none !default;
$button-disabled-opacity: 0.5 !default;

$button-static-color: $grey !default;
$button-static-background-color: $white-ter !default;
$button-static-border-color: $grey-lighter !default;

// The button sizes use mixins so they can be used at different breakpoints
@mixin button-small {
  border-radius: $radius-small;
  font-size: $size-small;

  // добавил
  height: 2.0005em;
  padding-left: 0.917em; // 11px
  padding-right: 0.917em; // 11px
}

@mixin button-medium {
  //font-size: $size-medium;

  // добавил
  font-size: rem-calc(14px);
  font-weight: $weight-semibold;
  height: 3.750em;
  //padding-left: 1.500em;
  //padding-right: 1.500em;
  padding-left: (2.143em / 1.5);
  padding-right: (2.143em / 1.5);
  text-transform: uppercase;
  min-width: 140px;
  @include tablet {
    padding-left: 2.143em;
    padding-right: 2.143em;
    font-size: rem-calc(16px);
  }
}

@mixin button-large {
  font-size: $size-large;
  height: 2.6923076923076925em;
  text-transform: uppercase;
}

.button {
  @include control;
  @include unselectable;
  background-color: $button-background-color;
  border-color: $button-border-color;
  border-width: $button-border-width;
  color: $button-color;
  cursor: pointer;
  height: 2.143em; // 30px
  justify-content: center;
  padding-bottom: $button-padding-vertical;
  padding-left: $button-padding-horizontal;
  padding-right: $button-padding-horizontal;
  padding-top: $button-padding-vertical;
  text-align: center;
  white-space: nowrap;
  strong {
    color: inherit;
  }
  .icon {
    &,
    &.is-small,
    &.is-medium,
    &.is-large {
      //height: 1.2em;
      height: 1.5em;
      //width: 1.2em;
      width: 1.5em;
    }
    &:first-child:not(:last-child) {
      margin-left: calc(-0.375em - #{$button-border-width});
      //margin-right: 0.1875em;
      margin-right: 0.75em;
    }
    &:last-child:not(:first-child) {
      margin-left: 0.1875em;
      margin-right: calc(-0.375em - #{$button-border-width});
    }
    &:first-child:last-child {
      //margin-left: calc(-0.375em - #{$button-border-width});
      margin-left: calc((-#{$button-padding-horizontal} / 2) - #{$button-border-width});
      //margin-right: calc(-0.375em - #{$button-border-width});
      margin-right: calc((-#{$button-padding-horizontal} / 2) - #{$button-border-width});
    }
  }
  // States
  &:hover,
  &.is-hovered {
    border-color: $button-hover-border-color;
    color: $button-hover-color;
  }
  &:focus,
  &.is-focused {
    border-color: $button-focus-border-color;
    color: $button-focus-color;
    &:not(:active) {
      box-shadow: $button-focus-box-shadow-size $button-focus-box-shadow-color;
    }
  }
  &:active,
  &.is-active {
    border-color: $button-active-border-color;
    color: $button-active-color;
  }
  // Colors
  &.is-text {
    background-color: transparent;
    border-color: transparent;
    color: $button-text-color;
    //text-decoration: underline;
    &:hover,
    &.is-hovered,
    &:focus,
    &.is-focused {
      background-color: $button-text-hover-background-color;
      color: $button-text-hover-color;
    }
    &:active,
    &.is-active {
      background-color: darken($button-text-hover-background-color, 5%);
      color: $button-text-hover-color;
    }
    &[disabled] {
      background-color: transparent;
      border-color: transparent;
      box-shadow: none;
    }
  }
  @each $name, $pair in $colors {
    $color: nth($pair, 1);
    $color-invert: nth($pair, 2);
    &.is-#{$name} {
      background-color: $color;
      border-color: transparent;
      color: $color-invert;
      &:hover,
      &.is-hovered {
        background-color: darken($color, 2.5%);
        border-color: transparent;
        color: $color-invert;
      }
      &:focus,
      &.is-focused {
        border-color: transparent;
        color: $color-invert;
        &:not(:active) {
          box-shadow: $button-focus-box-shadow-size rgba($color, 0.25);
        }
      }
      &:active,
      &.is-active {
        background-color: darken($color, 5%);
        border-color: transparent;
        color: $color-invert;
      }
      &[disabled] {
        background-color: $color;
        border-color: transparent;
        box-shadow: none;
      }
      &.is-inverted {
        background-color: $color-invert;
        color: $color;
        &:hover {
          background-color: darken($color-invert, 5%);
        }
        &[disabled] {
          background-color: $color-invert;
          border-color: transparent;
          box-shadow: none;
          color: $color;
        }
      }
      &.is-loading {
        &::after {
          border-color: transparent transparent $color-invert $color-invert !important;
        }
      }
      &.is-outlined {
        background-color: transparent;
        border-color: $color;
        color: $color;
        &:hover,
        &:focus {
          background-color: $color;
          border-color: $color;
          color: $color-invert;
        }
        &.is-loading {
          &::after {
            border-color: transparent transparent $color $color !important;
          }
        }
        &[disabled] {
          background-color: transparent;
          border-color: $color;
          box-shadow: none;
          color: $color;
        }
      }
      &.is-inverted.is-outlined {
        background-color: transparent;
        border-color: $color-invert;
        color: $color-invert;
        &:hover,
        &:focus {
          background-color: $color-invert;
          color: $color;
        }
        &[disabled] {
          background-color: transparent;
          border-color: $color-invert;
          box-shadow: none;
          color: $color-invert;
        }
      }
    }
  }
  // Sizes
  &.is-small {
    @include button-small;
  }
  &.is-medium {
    @include button-medium;
  }
  &.is-large {
    @include button-large;
  }
  // Modifiers
  &[disabled] {
    background-color: $button-disabled-background-color;
    border-color: $button-disabled-border-color;
    box-shadow: $button-disabled-shadow;
    opacity: $button-disabled-opacity;
  }
  &.is-fullwidth {
    display: flex;
    width: 100%;
  }
  &.is-loading {
    color: transparent !important;
    pointer-events: none;
    &::after {
      @include loader;
      @include center(1em);
      position: absolute !important;
    }
  }
  &.is-static {
    background-color: $button-static-background-color;
    border-color: $button-static-border-color;
    color: $button-static-color;
    box-shadow: none;
    pointer-events: none;
  }
  &.is-rounded {
    border-radius: $radius-rounded;
    //padding-left: 1em;
    //padding-right: 1em;
  }
}

.buttons {
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  .button {
    margin-bottom: 0.5rem;
    &:not(:last-child) {
      margin-right: 0.5rem;
    }
  }
  &:last-child {
    margin-bottom: -0.5rem;
  }
  &:not(:last-child) {
    margin-bottom: 1rem;
  }
  &.has-addons {
    .button {
      &:not(:first-child) {
        border-bottom-left-radius: 0;
        border-top-left-radius: 0;
      }
      &:not(:last-child) {
        border-bottom-right-radius: 0;
        border-top-right-radius: 0;
        margin-right: -1px;
      }
      &:last-child {
        margin-right: 0;
      }
      &:hover,
      &.is-hovered {
        z-index: 2;
      }
      &:focus,
      &.is-focused,
      &:active,
      &.is-active,
      &.is-selected {
        z-index: 3;
        &:hover {
          z-index: 4;
        }
      }
      &.is-expanded {
        flex-grow: 1;
      }
    }
  }
  &.is-centered {
    justify-content: center;
  }
  &.is-right {
    justify-content: flex-end;
  }
}

// my CUSTOM style buttons
.button-account-social {
  display: flex;
  flex-direction: column;
  justify-content: center;
  padding-top: 10px;
  font-weight: $weight-semibold;

  .button {
    min-width: 256px;
    text-transform: none;
    box-shadow: 0 2px 8px 0 rgba(0,0,0,0.10);
  }

  &__vk {
    color: #4D76A1;
    //margin-right: 44px;
    margin-bottom: 20px;
  }

  &__fb {
    color: #3B5998;
  }

  @include tablet {

    flex-direction: row;
  }
}

.btn-fake {
  background-color: #F5F5F5;
  border: 1px solid #F0F0F0;
  border-radius: 4px;
  padding: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
  color: #9D9D9D;
  font-size: 14px;
  // font-weight: 600;
  height: auto;
  line-height: 19px;
  text-decoration: none;
  margin-right: 10px;
  margin-bottom: 10px;

  &.is-fullwidth {
    width: 100%;
  }

  &--vertical {
    flex-direction: column;
  }
  //   &--reverse {
  //     flex-direction: row-reverse;
  //     &.btn-fake--vertical {

  //     }
  //   }

  span {
    width: 30px;
    height: 30px;
    border-radius: 30px;
    background-color: #85CD57;
    margin: 10px;
    font-size: 20px;
    color: #fff;
    line-height: 30px;
  }
}

//.is-loaderrr {
//  pointer-events: none;
//  position: relative;
//  &::after {
//    @include loader;
//    border-left-color: $link;
//    border-bottom-color: $link;
//    @include center(1em);
//    position: absolute !important;
//  }
//}

.control.is-loading .input {
  //filter: blur(10px);
  color: #9e9e9e;
  transition: color 0.2s;

}